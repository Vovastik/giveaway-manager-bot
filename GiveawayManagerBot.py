# -*- coding: utf-8 -*-
import asyncio
import secrets
import string
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# --- 1. –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---
API_TOKEN = '7572309893:AAF0pJt6SC6vjk9f21yM69cYJQTctBEHBmU'
# –°–ø–∏—Å–æ–∫ ADMIN_IDS –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø—É, –∞–ª–µ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–π –¥–ª—è –≤–∞—Å,
# —â–æ–± –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–æ–±—ñ —Å–µ—Ä–≤—ñ—Å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É.
ADMIN_IDS = [2042464894]

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# --- 2. –ú–û–î–ï–õ–Æ–í–ê–ù–ù–Ø –ë–ê–ó–ò –î–ê–ù–ò–• ---
# –£–í–ê–ì–ê! –î–∞–Ω—ñ –∑–Ω–∏–∫–∞—é—Ç—å –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É. –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ - –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ SQLite.
giveaways_db = {}
participations_db = {}
finished_giveaways_db = {}

# --- 3. –°–¢–ê–ù–ò FSM ---
class GiveawayCreation(StatesGroup):
    awaiting_channel = State()
    awaiting_photo = State()
    awaiting_text = State()
    awaiting_end_date = State()
    awaiting_prize_slots = State()

class EndingGiveaway(StatesGroup):
    awaiting_custom_text = State()

# --- 4. –ö–õ–ê–í–Ü–ê–¢–£–†–ê –ì–û–õ–û–í–ù–û–ì–û –ú–ï–ù–Æ ---
main_creator_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à"), KeyboardButton(text="üìã –ú–æ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ")],
        [KeyboardButton(text="üèÜ –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é..."
)

# --- 5. –§–£–ù–ö–¶–Ü–á-–ü–û–ú–Ü–ß–ù–ò–ö–ò ---
def generate_id(prefix: str) -> str:
    return f"{prefix}_{secrets.token_hex(4)}"

async def show_my_giveaways(user_id: int, chat_id: int):
    my_giveaways = [(g_id, g_data) for g_id, g_data in giveaways_db.items() if g_data.get("owner_id") == user_id]
    if not my_giveaways:
        await bot.send_message(chat_id=chat_id, text="–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤.")
        return
    builder = InlineKeyboardBuilder()
    text = "<b>üìå –í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:</b>\n\n"
    for i, (giveaway_id, data) in enumerate(my_giveaways, 1):
        prize_title = data.get("text", "–ë–µ–∑ –Ω–∞–∑–≤–∏").split('\n')[0]
        participants_count = len(participations_db.get(giveaway_id, []))
        text += f"{i}. <b>{prize_title}</b> (ID: <code>{giveaway_id}</code>)\n   - –£—á–∞—Å–Ω–∏–∫—ñ–≤: {participants_count}\n"
        builder.button(text=f"üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à #{i}", callback_data=f"end_giveaway:{giveaway_id}")
    builder.adjust(1)
    await bot.send_message(chat_id=chat_id, text=text, reply_markup=builder.as_markup())

async def pick_and_announce_winners(giveaway_id: str, custom_text: str, admin_user: types.User, admin_chat: types.Chat):
    giveaway_data = giveaways_db[giveaway_id]
    participants_data = participations_db.get(giveaway_id, [])
    
    if not participants_data:
        await bot.send_message(admin_chat.id, "üòî –ù–∞ –∂–∞–ª—å, —É —Ü—å–æ–º—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞.")
        return

    num_winners = giveaway_data.get("prize_slots", 1)
    winners_data = random.sample(participants_data, k=min(num_winners, len(participants_data)))
    winners_ids = [w['user_id'] for w in winners_data]
    
    winner_mentions = []
    for winner in winners_data:
        if winner['username']:
            winner_mentions.append(f"@{winner['username']}")
        else:
            winner_mentions.append(f'<a href="tg://user?id={winner["user_id"]}">{winner["first_name"]}</a>')

    prize_title = giveaway_data.get("text", "–ù–∞—à —Ä–æ–∑—ñ–≥—Ä–∞—à").splitlines()[0]
    results_text = (
        f"üéâ **–†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω–æ!** üéâ\n\n"
        f"<b>–ü—Ä–∏–∑:</b> {prize_title}\n\n"
        f"üèÜ **–ù–∞—à—ñ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ:**\n" + "\n".join(winner_mentions) +
        (f"\n\n<b>–í–∞–∂–ª–∏–≤–æ:</b> {custom_text}" if custom_text else "") +
        "\n\n–í—ñ—Ç–∞—î–º–æ!"
    )
    
    try:
        await bot.send_message(chat_id=giveaway_data['channel_id'], text=results_text)
        reroll_builder = InlineKeyboardBuilder()
        reroll_builder.button(text="üîÑ –ü–µ—Ä–µ–≤–∏–±—Ä–∞—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—è", callback_data=f"reroll_winner:{giveaway_id}")
        await bot.send_message(chat_id=admin_chat.id, text="‚úÖ –ü–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –≤–∏–∑–Ω–∞—á–µ–Ω–æ —Ç–∞ –æ–≥–æ–ª–æ—à–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ!", reply_markup=reroll_builder.as_markup())
    except Exception as e:
        await bot.send_message(admin_chat.id, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ –∫–∞–Ω–∞–ª. –ü–æ–º–∏–ª–∫–∞: {e}")

    finished_giveaways_db[giveaway_id] = giveaways_db.pop(giveaway_id)
    finished_giveaways_db[giveaway_id]['winners'] = winners_ids
    await show_my_giveaways(user_id=admin_user.id, chat_id=admin_chat.id)

# --- 6. –û–ë–†–û–ë–ù–ò–ö–ò –û–°–ù–û–í–ù–ò–• –ö–û–ú–ê–ù–î ---
@dp.message(CommandStart(deep_link=True))
async def handle_start_with_giveaway(message: types.Message, command: CommandObject):
    giveaway_id = command.args
    if giveaway_id not in giveaways_db:
        await message.answer("‚ùå –ù–∞ –∂–∞–ª—å, —Ü–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –¢–∞–∫, —Ö–æ—á—É –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å!", callback_data=f"join_giveaway:{giveaway_id}")
    await message.answer("üëã –í—ñ—Ç–∞—é! –©–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —É—á–∞—Å—Ç—å, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É.", reply_markup=builder.as_markup())

@dp.message(Command("start"))
async def handle_start_with_role_choice(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="üë§ –Ø –£—á–∞—Å–Ω–∏–∫", callback_data="role:participant")
    builder.button(text="üéôÔ∏è –Ø –°—Ç—Ä—ñ–º–µ—Ä", callback_data="role:streamer")
    builder.adjust(1)
    await message.answer("üëã **–í—ñ—Ç–∞—é!**\n\n–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=builder.as_markup())

# --- 7. –û–ë–†–û–ë–ù–ò–ö–ò –Ü–ù–õ–ê–ô–ù-–ö–ù–û–ü–û–ö (CALLBACK QUERY) ---
@dp.callback_query(F.data.startswith("join_giveaway:"))
async def process_giveaway_join(callback: types.CallbackQuery):
    user = callback.from_user
    giveaway_id = callback.data.split(":")[1]
    if giveaway_id not in giveaways_db:
        await callback.message.edit_text("‚ùå –ù–∞ –∂–∞–ª—å, —Ä–æ–∑—ñ–≥—Ä–∞—à –≤–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π.")
        await callback.answer()
        return
    if any(p['user_id'] == user.id for p in participations_db.get(giveaway_id, [])):
        await callback.answer("üëç –í–∏ –≤–∂–µ –±–µ—Ä–µ—Ç–µ —É—á–∞—Å—Ç—å!", show_alert=True)
        return
    new_ticket_id = generate_id("t")
    timestamp = datetime.now()
    if giveaway_id not in participations_db:
        participations_db[giveaway_id] = []
    participations_db[giveaway_id].append({'user_id': user.id, 'username': user.username, 'first_name': user.first_name, 'ticket_id': new_ticket_id, 'timestamp': timestamp})
    await callback.message.delete()
    await bot.send_message(chat_id=user.id, text=f"‚úÖ **–í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!**\n\n<b>–í–ê–® –ö–í–ò–¢–û–ö</b>\nüé´ –ù–æ–º–µ—Ä: <code>{new_ticket_id}</code>")
    current_giveaway = giveaways_db[giveaway_id]
    new_count = len(participations_db[giveaway_id])
    bot_info = await bot.get_me()
    button_link = f"https://t.me/{bot_info.username}?start={giveaway_id}"
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å", url=button_link)
    new_caption = (f"{current_giveaway['text']}\n\n–£—á–∞—Å–Ω–∏–∫—ñ–≤: {new_count}\n–ü—Ä–∏–∑–æ–≤–∏—Ö –º—ñ—Å—Ü—å: {current_giveaway['prize_slots']}\n–î–∞—Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—É: {current_giveaway['end_date']}")
    try:
        await bot.edit_message_caption(chat_id=current_giveaway['channel_id'], message_id=current_giveaway['announcement_message_id'], caption=new_caption, reply_markup=builder.as_markup())
    except Exception as e:
        print(f"–ü–û–ú–ò–õ–ö–ê –û–ù–û–í–õ–ï–ù–ù–Ø –õ–Ü–ß–ò–õ–¨–ù–ò–ö–ê: {e}")
    await callback.answer()

@dp.callback_query(F.data == "role:participant")
async def handle_participant_role(callback: types.CallbackQuery):
    await callback.message.edit_text("üéâ **–í—ñ—Ç–∞—é!**\n\n–©–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å, –∑–Ω–∞–π–¥—ñ—Ç—å –ø–æ—Å—Ç –∑ —Ä–æ–∑—ñ–≥—Ä–∞—à–µ–º —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '<b>‚úÖ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å</b>'.")
    await callback.answer()

@dp.callback_query(F.data == "role:streamer")
async def handle_streamer_role(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–í—ñ—Ç–∞—é –≤ –ø–∞–Ω–µ–ª—ñ —Ç–≤–æ—Ä—Ü—è! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=main_creator_menu)
    await callback.answer()

@dp.callback_query(F.data.startswith("end_giveaway:"))
async def start_end_giveaway(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    giveaway_id = callback.data.split(":")[1]
    if giveaway_id not in giveaways_db or giveaways_db[giveaway_id]["owner_id"] != user_id:
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ü–µ –Ω–µ –≤–∞—à —Ä–æ–∑—ñ–≥—Ä–∞—à.", show_alert=True)
        return
    await state.update_data(giveaway_id_to_end=giveaway_id)
    await state.set_state(EndingGiveaway.awaiting_custom_text)
    builder = InlineKeyboardBuilder()
    builder.button(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"skip_text:{giveaway_id}")
    await callback.message.edit_text(
        "‚úçÔ∏è **–û—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫: –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç**\n\n–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ (–Ω–∞–ø—Ä., `–ü–µ—Ä–µ–º–æ–∂—Ü—é –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ @admin`).\n\n–ê–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("skip_text:"))
async def skip_custom_text_handler(callback: types.CallbackQuery, state: FSMContext):
    giveaway_id = callback.data.split(":")[1]
    await callback.message.delete()
    await pick_and_announce_winners(giveaway_id=giveaway_id, custom_text="", admin_user=callback.from_user, admin_chat=callback.message.chat)
    await callback.answer()

@dp.callback_query(F.data.startswith("reroll_winner:"))
async def reroll_winner_handler(callback: types.CallbackQuery):
    # ... (–∫–æ–¥ –ø–µ—Ä–µ–≤–∏–±–æ—Ä—É –ø–µ—Ä–µ–º–æ–∂—Ü—è)
    pass

# --- 8. –û–ë–†–û–ë–ù–ò–ö–ò –ö–ù–û–ü–û–ö –ì–û–õ–û–í–ù–û–ì–û –ú–ï–ù–Æ ---
@dp.message(F.text == "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à")
async def handle_create_giveaway_button(message: types.Message, state: FSMContext):
    await state.set_state(GiveawayCreation.awaiting_channel)
    await message.answer("–†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ! –ù–∞–¥—ñ—à–ª—ñ—Ç—å ID –∞–±–æ @username –∫–∞–Ω–∞–ª—É.", reply_markup=types.ReplyKeyboardRemove())

@dp.message(F.text == "üìã –ú–æ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ")
async def handle_my_giveaways_button(message: types.Message):
    await show_my_giveaways(user_id=message.from_user.id, chat_id=message.chat.id)
    
@dp.message(F.text == "üèÜ –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤")
async def handle_history_giveaways_button(message: types.Message):
    user_id = message.from_user.id
    my_finished_giveaways = [(g_id, g_data) for g_id, g_data in finished_giveaways_db.items() if g_data.get("owner_id") == user_id]
    if not my_finished_giveaways:
        await message.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤.")
        return
    response_text = "<b>üèÜ –í–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:</b>\n\n"
    for i, (giveaway_id, data) in enumerate(my_finished_giveaways, 1):
        prize_title = data.get("text", "–ë–µ–∑ –Ω–∞–∑–≤–∏").split('\n')[0]
        winner_ids = data.get("winners", [])
        winner_mentions = []
        for winner_id in winner_ids:
            participant_data = next((p for p in participations_db.get(giveaway_id, []) if p['user_id'] == winner_id), None)
            if participant_data:
                if participant_data['username']:
                    winner_mentions.append(f"@{participant_data['username']}")
                else:
                    winner_mentions.append(f'<a href="tg://user?id={participant_data["user_id"]}">{participant_data["first_name"]}</a>')
            else:
                winner_mentions.append(f"ID: {winner_id}")
        response_text += f"{i}. <b>{prize_title}</b>\n   - –ü–µ—Ä–µ–º–æ–∂—Ü—ñ: {', '.join(winner_mentions)}\n\n"
    await message.answer(response_text)

# --- 9. –û–ë–†–û–ë–ù–ò–ö–ò FSM ---
@dp.message(GiveawayCreation.awaiting_channel)
async def process_channel(message: types.Message, state: FSMContext):
    # ... (–∫–æ–¥ –¥–ª—è FSM —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É)
    pass
# ... (–≤—Å—ñ —ñ–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ FSM —Ç—É—Ç)

@dp.message(EndingGiveaway.awaiting_custom_text, F.text)
async def process_custom_text_and_pick_winner(message: types.Message, state: FSMContext):
    data = await state.get_data()
    giveaway_id = data.get("giveaway_id_to_end")
    await state.clear()
    await message.delete()
    custom_text = message.text
    await pick_and_announce_winners(giveaway_id=giveaway_id, custom_text=custom_text, admin_user=message.from_user, admin_chat=message.chat)

# --- 10. –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫–∞—î–º–æ GiveawayManagerBot...")
    asyncio.run(main())